// 1. Створення базового об'єкту "Book":
/*
 * Об'єкт: Book
 * Властивості:
 * --------------
 * | Властивість | Значення |
 * -----------------------
 * | title       | "Загальна Книга" |
 * | author      | "Анонім"    |
 * | pages       | 0              |
 *
 * Функції:
 * --------------
 * | Функція    | Опис                                                    |
 * -----------------------------------------------------------------------
 * | read()     | Виводить повідомлення "Ви читаєте <title> від <author>" |
 */

let Book = {
  title: "Загальна Книга",
  author: "Анонім",
  pages: 0,
  read: function () {
    console.log(`Ви читаєте "${this.title}" від ${this.author}`);
  },
};

console.log("Завдання: 1 ==============================");

// Виводимо в консоль Об'єкт: Book
console.log(Book);
// Виводимо в консоль прототип Об'єкту: Book
console.log(Book.hasOwnProperty("title"));
// Використовуємо функцію read об'єкту Book
Book.read();

// 2. Наслідування від базового об'єкту Book

/*
 * Об'єкт: Novel
 * Властивості та функції наслідуються від об'єкта Book
 * Додаємо нову властивість
 *  | Властивість | Значення |
 *  -----------------------
 *  | genre       | "Новела" |
 */

let Novel = Object.create(Book);
// Додаткова властивість
Novel.genre = "Новела";
console.log("Завдання: 2 ==============================");

// Виводимо в консоль Об'єкт: Novel
console.log(Novel);
// Виводимо в консоль прототип Об'єкту: Novel
console.log(Object.getPrototypeOf(Novel));

// 3. Створення нового об'єкту та зміна його прототипу

/*
 * Об'єкт: Biography
 * Властивості:
 * --------------
 * | Властивість | Значення          |
 * ----------------------------------
 * | title       | "Загальна Біографія" |
 * | author      | "Біограф"             |
 * | pages       | 200                  |
 */

let Biography = {
  title: "Загальна Біографія",
  author: "Біограф",
  pages: 200,
};
// Зміна прототипу об'єкта Biography на Novel
Object.setPrototypeOf(Biography, Novel);
console.log("Завдання: 3 ==============================");
// Виводимо в консоль Об'єкт: Biography
console.log(Biography);
// Перевіримо чи являється Novel прототипом Biography та виведемо в консоль
console.log(Novel.isPrototypeOf(Biography));

// 4. Інкапсуляція властивості та додання властивості
/*
 * Об'єкт: ScienceBook
 * Властивості та функції наслідуються від об'єкта Book
 * Також тут використовується інкапсуляція для створення властивості 'info', яка не може бути змінена напряму, а лише змінюється за допомогю гетера
 */

// Наслідуємо властивості і функції від об'єкта Book
let ScienceBook = Object.create(Book);

// Додаємо властивість 'info' за допомогою Object.defineProperty
Object.defineProperty(ScienceBook, "info", {
  configurable: false, // зробимо щоб 'info' не можно було видалити або змінити, перевіримо і спробуємо присвоїти ій будь яке значення,
  // Отримаємо помилку Cannot assign to read only property 'info' of object '#<Object>'
  // Створюємо сетер який буде присвоювати info значення яке отримує, помилку більше не отримуємо але при спробі вивести значення info отримуємо undefined
  set(value) {
    this._info = value;
  },
  // Створимо гетер який буде нам повертати рядок Про книгу <title>: <info>, тепер все працює коректно
  get() {
    return `Про книгу ${this.title}: ${this._info}`;
  },
});

// Заповнюємо об'єкт
// | Властивість | Значення |
// |-------------|-------------------|
// | title | "Фізика 101" |
// | author | "Альберт Ейнштейн" |
// | info | написана в 1915 році |

ScienceBook.title = "Фізика 101";
ScienceBook.author = "Альберт Ейнштейн";
ScienceBook.info = "написана в 1915 році";

console.log("Завдання: 4 ==============================");
// Виводимо в консоль властивість info
console.log(ScienceBook.info);
// Виводимо в консоль налаштування властивости info
console.log(Object.getOwnPropertyDescriptor(ScienceBook, "info"));

// 5. Поліморфізм: створення нового об'єкта та перевизначення його методу
/*
 * Об'єкт: Textbook
 * Властивості та функції наслідуються від об'єкта ScienceBook
 * Метод read() перевизначено для демонстрації поліморфізму,
 * має виводити "Ви читаєте підручник "<title>" від <author>. <info>"
 */

// Наслідуємо властивості з ScienceBook
let Textbook = Object.create(ScienceBook);
// Перевизначаємо метод read()
Textbook.read = function () {
  console.log(
    `Ви читаєте підручник "${this.title}" від ${this.author}. ${this.info}`
  );
};

// Встановлюємо значення для Textbook
// | Властивість | Значення |
// |-------------|----------------------------|
// | title | "Фізика у Вищій Школі" |
// | author | "Дж. Д. Джонс" |
Textbook.title = "Фізика у Вищій Школі";
Textbook.author = "Дж. Д. Джонс";

console.log("Завдання: 5 ==============================");
// Запускаємо функцію read()
Textbook.read();

// 6. Абстракція: створення об'єкта з загальними властивостями
/*
 * Об'єкт: Media
 * Властивості:
 * --------------
 * | Властивість | Значення          |
 * ----------------------------------
 * | format      | "Загальний Формат" |
 * | length      | 0                  |
 *
 * Функції:
 * --------------
 * | Функція | Опис                                                                 |
 * -------------------------------------------------------------------------------
 * | play()  | Виводить повідомлення "Зараз відтворюється медіа у форматі <format> з тривалістю <length> секунд" |
 */
let Media = {
  format: "Загальний Формат",
  length: 0,
  play: function () {
    console.log(
      `Зараз відтворюється медіа у форматі ${this.format} з тривалістю ${this.length} секунд`
    );
  },
};

/*
 * Об'єкт: Song
 * Властивості та функції наслідуються від об'єкта Media
 * Додаткові властивості: artist, title
 */

let Song = Object.create(Media);
// Встановлюємо додаткові властивості
// | Властивість | Значення |
// |-------------|----------------------|
// | artist | "Загальний Виконавець" |
// | title | "Загальна Пісня" |
Song.artist = "Загальний Виконавець";
Song.title = "Загальна Пісня";
console.log("Завдання: 6 ==============================");
// Використовуємо функцію play()
Song.play();
